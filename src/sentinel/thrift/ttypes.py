#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class BlockDeviceInfo:
  """
  Attributes:
   - device
   - data_read
   - data_write
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'device', None, None, ), # 1
    (2, TType.I64, 'data_read', None, None, ), # 2
    (3, TType.I64, 'data_write', None, None, ), # 3
  )

  def __init__(self, device=None, data_read=None, data_write=None,):
    self.device = device
    self.data_read = data_read
    self.data_write = data_write

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.device = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.data_read = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.data_write = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BlockDeviceInfo')
    if self.device is not None:
      oprot.writeFieldBegin('device', TType.STRING, 1)
      oprot.writeString(self.device)
      oprot.writeFieldEnd()
    if self.data_read is not None:
      oprot.writeFieldBegin('data_read', TType.I64, 2)
      oprot.writeI64(self.data_read)
      oprot.writeFieldEnd()
    if self.data_write is not None:
      oprot.writeFieldBegin('data_write', TType.I64, 3)
      oprot.writeI64(self.data_write)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NetworkDeviceInfo:
  """
  Attributes:
   - device
   - data_send
   - data_receive
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'device', None, None, ), # 1
    (2, TType.I64, 'data_send', None, None, ), # 2
    (3, TType.I64, 'data_receive', None, None, ), # 3
  )

  def __init__(self, device=None, data_send=None, data_receive=None,):
    self.device = device
    self.data_send = data_send
    self.data_receive = data_receive

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.device = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.data_send = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.data_receive = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NetworkDeviceInfo')
    if self.device is not None:
      oprot.writeFieldBegin('device', TType.STRING, 1)
      oprot.writeString(self.device)
      oprot.writeFieldEnd()
    if self.data_send is not None:
      oprot.writeFieldBegin('data_send', TType.I64, 2)
      oprot.writeI64(self.data_send)
      oprot.writeFieldEnd()
    if self.data_receive is not None:
      oprot.writeFieldBegin('data_receive', TType.I64, 3)
      oprot.writeI64(self.data_receive)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProcessInfo:
  """
  Attributes:
   - pid
   - name
   - state
   - utime
   - stime
   - memory
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'state', None, None, ), # 3
    (4, TType.I64, 'utime', None, None, ), # 4
    (5, TType.I64, 'stime', None, None, ), # 5
    (6, TType.I64, 'memory', None, None, ), # 6
  )

  def __init__(self, pid=None, name=None, state=None, utime=None, stime=None, memory=None,):
    self.pid = pid
    self.name = name
    self.state = state
    self.utime = utime
    self.stime = stime
    self.memory = memory

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.pid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.state = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.utime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.stime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.memory = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProcessInfo')
    if self.pid is not None:
      oprot.writeFieldBegin('pid', TType.I32, 1)
      oprot.writeI32(self.pid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.STRING, 3)
      oprot.writeString(self.state)
      oprot.writeFieldEnd()
    if self.utime is not None:
      oprot.writeFieldBegin('utime', TType.I64, 4)
      oprot.writeI64(self.utime)
      oprot.writeFieldEnd()
    if self.stime is not None:
      oprot.writeFieldBegin('stime', TType.I64, 5)
      oprot.writeI64(self.stime)
      oprot.writeFieldEnd()
    if self.memory is not None:
      oprot.writeFieldBegin('memory', TType.I64, 6)
      oprot.writeI64(self.memory)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MachineStatus:
  """
  Attributes:
   - timestamp
   - os_type
   - os_version
   - uptime
   - idletime
   - cpu_total
   - cpu_usages
   - memory_total
   - memory_free
   - swap_total
   - swap_free
   - processes
   - netdevs
   - blockdevs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'timestamp', None, None, ), # 1
    (2, TType.STRING, 'os_type', None, None, ), # 2
    (3, TType.STRING, 'os_version', None, None, ), # 3
    (4, TType.I64, 'uptime', None, None, ), # 4
    (5, TType.I64, 'idletime', None, None, ), # 5
    (6, TType.I16, 'cpu_total', None, None, ), # 6
    (7, TType.LIST, 'cpu_usages', (TType.I16,None), None, ), # 7
    (8, TType.I64, 'memory_total', None, None, ), # 8
    (9, TType.I64, 'memory_free', None, None, ), # 9
    (10, TType.I64, 'swap_total', None, None, ), # 10
    (11, TType.I64, 'swap_free', None, None, ), # 11
    (12, TType.LIST, 'processes', (TType.STRUCT,(ProcessInfo, ProcessInfo.thrift_spec)), None, ), # 12
    None, # 13
    (14, TType.LIST, 'netdevs', (TType.STRUCT,(NetworkDeviceInfo, NetworkDeviceInfo.thrift_spec)), None, ), # 14
    (15, TType.LIST, 'blockdevs', (TType.STRUCT,(BlockDeviceInfo, BlockDeviceInfo.thrift_spec)), None, ), # 15
  )

  def __init__(self, timestamp=None, os_type=None, os_version=None, uptime=None, idletime=None, cpu_total=None, cpu_usages=None, memory_total=None, memory_free=None, swap_total=None, swap_free=None, processes=None, netdevs=None, blockdevs=None,):
    self.timestamp = timestamp
    self.os_type = os_type
    self.os_version = os_version
    self.uptime = uptime
    self.idletime = idletime
    self.cpu_total = cpu_total
    self.cpu_usages = cpu_usages
    self.memory_total = memory_total
    self.memory_free = memory_free
    self.swap_total = swap_total
    self.swap_free = swap_free
    self.processes = processes
    self.netdevs = netdevs
    self.blockdevs = blockdevs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.os_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.os_version = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.uptime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.idletime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.cpu_total = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.cpu_usages = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI16();
            self.cpu_usages.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.memory_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.memory_free = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.swap_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.swap_free = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.processes = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = ProcessInfo()
            _elem11.read(iprot)
            self.processes.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.netdevs = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = NetworkDeviceInfo()
            _elem17.read(iprot)
            self.netdevs.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.blockdevs = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = BlockDeviceInfo()
            _elem23.read(iprot)
            self.blockdevs.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MachineStatus')
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 1)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.os_type is not None:
      oprot.writeFieldBegin('os_type', TType.STRING, 2)
      oprot.writeString(self.os_type)
      oprot.writeFieldEnd()
    if self.os_version is not None:
      oprot.writeFieldBegin('os_version', TType.STRING, 3)
      oprot.writeString(self.os_version)
      oprot.writeFieldEnd()
    if self.uptime is not None:
      oprot.writeFieldBegin('uptime', TType.I64, 4)
      oprot.writeI64(self.uptime)
      oprot.writeFieldEnd()
    if self.idletime is not None:
      oprot.writeFieldBegin('idletime', TType.I64, 5)
      oprot.writeI64(self.idletime)
      oprot.writeFieldEnd()
    if self.cpu_total is not None:
      oprot.writeFieldBegin('cpu_total', TType.I16, 6)
      oprot.writeI16(self.cpu_total)
      oprot.writeFieldEnd()
    if self.cpu_usages is not None:
      oprot.writeFieldBegin('cpu_usages', TType.LIST, 7)
      oprot.writeListBegin(TType.I16, len(self.cpu_usages))
      for iter24 in self.cpu_usages:
        oprot.writeI16(iter24)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.memory_total is not None:
      oprot.writeFieldBegin('memory_total', TType.I64, 8)
      oprot.writeI64(self.memory_total)
      oprot.writeFieldEnd()
    if self.memory_free is not None:
      oprot.writeFieldBegin('memory_free', TType.I64, 9)
      oprot.writeI64(self.memory_free)
      oprot.writeFieldEnd()
    if self.swap_total is not None:
      oprot.writeFieldBegin('swap_total', TType.I64, 10)
      oprot.writeI64(self.swap_total)
      oprot.writeFieldEnd()
    if self.swap_free is not None:
      oprot.writeFieldBegin('swap_free', TType.I64, 11)
      oprot.writeI64(self.swap_free)
      oprot.writeFieldEnd()
    if self.processes is not None:
      oprot.writeFieldBegin('processes', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.processes))
      for iter25 in self.processes:
        iter25.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.netdevs is not None:
      oprot.writeFieldBegin('netdevs', TType.LIST, 14)
      oprot.writeListBegin(TType.STRUCT, len(self.netdevs))
      for iter26 in self.netdevs:
        iter26.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.blockdevs is not None:
      oprot.writeFieldBegin('blockdevs', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.blockdevs))
      for iter27 in self.blockdevs:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommandResponse:
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommandResponse')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
